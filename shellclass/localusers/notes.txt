${UID} is a special preset variable that comes with bash - current user id

man bash - opens bash manual, we can navigate like in vim and search be /UID + enter (optionally n as next occur.)

? for reverse search

type -a is used to display information about the command type. 
-to know if its a command(shell builtin) or program, to use man or help

VAR=$(id -un) - syntax how to store command output to variable
alternative older style syntax would be VAR=`id -un`

spaces arround [[ ]] are mandatory
Syntax is not portable on every shell( it's bash syntax
older way was single bracket [ ] 

less - pager

root's UID is 0 always

"{?}" - special variable that sets bash, holds exit status of most recently executed command. 

testing strings is with = sign but can be used ==
- the right side string is used as pattern and pattern matching is performed 

useradd command
-LOGIN = username, typicaly 8 or less chars is the convention(based on history old unix systems etc)
You would not see them in ps -ef(show every process)
-usernames are case sensitive,

configuration section of man page (for useradd cmd)
/CONFIGURATION
->shows conf variables in /etc/login.defs that change the behavior of useradd
CREATE_HOME (boolean) - indicates if a home dir should be created by default for new users.
check the default behavior by cat /etc/login.defs (external config file (can be overriden by -m of useradd)

passwd - prompt for new pass for your current account
to another account u have to be root.
--stdin takes standard input(cmd input or command) as password
-e expiry - to force user to change pass next login

su - 
switch user + "-" to act as a login shell 

${0} - variable is positional paramater which contains contents of cmdline
parameter used inside the shell script
argument is variable(data) passed into the shell script
-so argument supplied on the cmdline becomes the value stored in a parameter 
- very first positional parameter ${0} contains name of the script itself

possible executions:
./luser-demo06.sh
/vagrant/luser-demo06.sh (absolute path)

PATH   The  search  path  for commands.  
It is a colon-separated list of directories in which the shell looks for commands (see COMMAND EXECUTION below).
- Cesta v ktorej vyhladava commandy, programy. Napr: echo ${PATH}
/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/usr/sbin:/home/vagrant/bin
Ked si pozriem napr head command s which head(which -a head) tak i najde /usr/bin. 
Takze ked vytvorim sh script v /usr/local/bin s nazvom head a dam mu 755 (ako sudo), tak tym predbehnem ten defaultny command
Takze potom type command a execuovanie bude pointovat na moj. Po odstraneni mojho custom sh nesmiem zabudnut hash -r, lebo inak bude stale pointovat nespravne

man bash
/SPECIAL
Special Parameters
${@} takes command arguments/parameters as list 
${*} takes command arguments/parameters as one entry(string) made from pos parameters (starting from 1)

> redirection to a file
creates file when not exists, replaces content of file when exists
< reading from a file, can be used as input to a command
if you want to append use >> 

FD - file descriptor
FD 0 - STDIN, FD 1 - STDOUT, FD 2 - STDERR
head -n1 /etc/passwd /etc/hosts /nonexistingfile > head.both 2>&1
redirecting both stdout and stderr to same file
head -n1 /etc/passwd /etc/hosts /nonexistingfile &> head.both
newer syntax

head -n1 /etc/passwd /etc/hosts /nonexistingfile &>> head.both - append both

WHEN PIPEing, we only get stdout(without stderr) through pipe. we have to use redirection of stderr to stdout.
2> this is stderr &1 refers to the FD1, which is stdout, so:
2>&1 | or shorcut syntax |&
& represents File Descriptor 

/dev/null - place to send stdout err if we want to discard them